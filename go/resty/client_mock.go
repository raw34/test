// Code generated by MockGen. DO NOT EDIT.
// Source: resty/client.go

// Package resty is a generated GoMock package.
package resty

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockClientInterface) Delete(url string) (ResponseInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", url)
	ret0, _ := ret[0].(ResponseInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockClientInterfaceMockRecorder) Delete(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClientInterface)(nil).Delete), url)
}

// Execute mocks base method.
func (m *MockClientInterface) Execute(method, url string) (ResponseInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", method, url)
	ret0, _ := ret[0].(ResponseInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockClientInterfaceMockRecorder) Execute(method, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockClientInterface)(nil).Execute), method, url)
}

// Get mocks base method.
func (m *MockClientInterface) Get(url string) (ResponseInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", url)
	ret0, _ := ret[0].(ResponseInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientInterfaceMockRecorder) Get(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClientInterface)(nil).Get), url)
}

// Head mocks base method.
func (m *MockClientInterface) Head(url string) (ResponseInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head", url)
	ret0, _ := ret[0].(ResponseInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head.
func (mr *MockClientInterfaceMockRecorder) Head(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockClientInterface)(nil).Head), url)
}

// Options mocks base method.
func (m *MockClientInterface) Options(url string) (ResponseInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Options", url)
	ret0, _ := ret[0].(ResponseInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Options indicates an expected call of Options.
func (mr *MockClientInterfaceMockRecorder) Options(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockClientInterface)(nil).Options), url)
}

// Patch mocks base method.
func (m *MockClientInterface) Patch(url string) (ResponseInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", url)
	ret0, _ := ret[0].(ResponseInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockClientInterfaceMockRecorder) Patch(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockClientInterface)(nil).Patch), url)
}

// Post mocks base method.
func (m *MockClientInterface) Post(url string) (ResponseInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", url)
	ret0, _ := ret[0].(ResponseInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockClientInterfaceMockRecorder) Post(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockClientInterface)(nil).Post), url)
}

// Put mocks base method.
func (m *MockClientInterface) Put(url string) (ResponseInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", url)
	ret0, _ := ret[0].(ResponseInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockClientInterfaceMockRecorder) Put(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockClientInterface)(nil).Put), url)
}

// SetHeader mocks base method.
func (m *MockClientInterface) SetHeader(header, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHeader", header, value)
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockClientInterfaceMockRecorder) SetHeader(header, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockClientInterface)(nil).SetHeader), header, value)
}
