// Code generated by MockGen. DO NOT EDIT.
// Source: resty/response.go

// Package resty is a generated GoMock package.
package resty

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockResponseInterface is a mock of ResponseInterface interface.
type MockResponseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockResponseInterfaceMockRecorder
}

// MockResponseInterfaceMockRecorder is the mock recorder for MockResponseInterface.
type MockResponseInterfaceMockRecorder struct {
	mock *MockResponseInterface
}

// NewMockResponseInterface creates a new mock instance.
func NewMockResponseInterface(ctrl *gomock.Controller) *MockResponseInterface {
	mock := &MockResponseInterface{ctrl: ctrl}
	mock.recorder = &MockResponseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponseInterface) EXPECT() *MockResponseInterfaceMockRecorder {
	return m.recorder
}

// StatusCode mocks base method.
func (m *MockResponseInterface) StatusCode() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// StatusCode indicates an expected call of StatusCode.
func (mr *MockResponseInterfaceMockRecorder) StatusCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusCode", reflect.TypeOf((*MockResponseInterface)(nil).StatusCode))
}

// String mocks base method.
func (m *MockResponseInterface) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockResponseInterfaceMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockResponseInterface)(nil).String))
}
